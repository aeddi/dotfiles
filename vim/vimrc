" ===================================================================
" aeddi's Vim config
" Last update: 04/2020
" ===================================================================

" =========================
" BUILT-IN CONFIG
" =========================
"
"1. Interface
"-------------------- {{{
set title						" Set 'filename [+=-] (path) - NVIM' as terminal title
set ttyfast						" More reactive displaying (enabled in nvim by default)
set mousehide					" Hide mouse cursor when typing
set mouse-=a					" Disable mouse support in vim
set wildmenu					" Enable command auto-completion
set splitbelow					" New horizontal split appears below
set splitright					" New vertical split appears on right
set number						" Display line numbers in left column
"-------------------- }}}

"2. Colors
"-------------------- {{{
" Setup colors according to the terminal and the vim version
if (empty($TMUX) && &term != "screen")
  if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif
else
	set t_Co=256
endif

syntax on						" Enable syntax colors
"-------------------- }}}

"3. Indentation
"-------------------- {{{
set noexpandtab					" Disable tab to spaces
set autoindent					" Current line indent based on previous line
set smartindent					" Auto-indentation in while, if, etc...
set tabstop=4					" Tab of 4 columns by default
set shiftwidth=4				" Auto-indent with 4 columns
set backspace=indent,eol,start	" Restore normal backspace behavior
"-------------------- }}}

"4. Search
"-------------------- {{{
set history=500					" 500 command line history
set ignorecase					" Search in case-insensitive mode
set smartcase					" Search in case sensitive mode when query contains uppercase
set incsearch					" Highlight typed word during typing
set hlsearch					" Highlight typed word after typing
"-------------------- }}}

"5. Keybindings
"-------------------- {{{
" Enable/Disable paste mode
set pastetoggle=<F12>
" Replace escape key
imap ;j <Esc>
nmap ;j <Esc>
vmap ;j <Esc>
cmap ;j <Esc>
" Move between splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Switch between tabs
nnoremap { :tabprevious <CR>
nnoremap } :tabnext <CR>
" Switch between buffers
nnoremap [b :bprevious <CR>
nnoremap ]b :bnext <CR>
" Scroll command history or completion
cnoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<DOWN>"
cnoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<UP>"
" Trigger or confirm command completion
set wildcharm=<TAB>
cnoremap <expr> <C-l> pumvisible() ? "\<DOWN>" : "\<TAB>"
" Quick tab switching using tab numbers
noremap <space>1 1gt
noremap <space>2 2gt
noremap <space>3 3gt
noremap <space>4 4gt
noremap <space>5 5gt
noremap <space>6 6gt
noremap <space>7 7gt
noremap <space>8 8gt
noremap <space>9 9gt
noremap <space>0 :tablast<cr>
"-------------------- }}}

"6. Commands
"-------------------- {{{
" Save file as sudo
command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!
command! Wq :execute ':W' | :q
command! WQ :Wq
" Reload vimrc
command! Source :source ~/.vimrc
" Abbreviation for tabnew
ca tn tabnew
"-------------------- }}}

"7. Misc.
"-------------------- {{{
filetype plugin on				" Load the plugin files for specific file type
set nocompatible				" Disable vi compatibility
set autoread					" Refresh current file when modified by another editor
set showmatch					" Hightlight matching bracket
set matchtime=10				" Show matching bracket for 1 second
set scrolloff=5					" Display minimum five lines above/bellow the cursor
set sidescrolloff=15			" Display minimum five columns on sides of the cursor
set cursorline					" Display horizontal line on the cursor position
set nowrap						" Disable wrapping the text on multiple lines
" Fold based on markers in vimrc files only
autocmd BufRead,BufNewFile .vimrc* set foldmethod=marker
"-------------------- }}}

"8. Yankless paste
"-------------------- {{{
" Disable copying content when erasing it with a paste
function! RestoreRegister()
    let @" = s:restore_reg
    return ''
endfunction

function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction

vnoremap <silent> <expr> p <sid>Repl()
"-------------------- }}}

"9. Backups
"-------------------- {{{
if isdirectory($HOME . '/.vim/backup') == 0
	:silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
endif
set backupdir-=.
set backupdir+=.
set backupdir-=~/
set backupdir^=~/.vim/backup/
set backup
"-------------------- }}}

"10. Swap files
"-------------------- {{{
if isdirectory($HOME . '/.vim/swap') == 0
	:silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=~/.vim/swap//
set directory+=.
"-------------------- }}}

"11. Undo history
"-------------------- {{{
set undolevels=500	" 500 entries in undo history

if exists("+undofile")
	if isdirectory($HOME . '/.vim/undo') == 0
		:silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
	endif
	set undodir=~/.vim/undo//
	set undodir=~/.vim/undo//
	set undofile
endif
"-------------------- }}}


" =========================
" PLUGINS CONFIG
" =========================

" There are three different sets of plugins with their associated configs: light, medium and heavy.
" These configurations have been tested using --startuptime flag and :profile command.
" To use them, just set a $VIMPLUG environment variable with one of the following values:
" - 'NONE'		doesn't load any additional plugins
" - 'LIGHT'		only loads plugins that can run on a low perf. computer (for example on a small VM)
" - 'MEDIUM'	loads both light and medium plugins (no autocompletion and no LSP)
" - '' (empty)	loads all plugins, to be reserved for recent or powerful machines

"1. Light plugins import
"-------------------- {{{
function! LoadLightPlugins()
	" Interface improvements
	"-------------------- {{{
	Plug 'wincent/terminus'					" Enhances vim integration in terminal
	Plug 'vim-airline/vim-airline'			" Improved statusline and tabline
	Plug 'gcmt/taboo.vim'					" Allows to rename and format tabs
	Plug 'mhinz/vim-startify'				" Fancy start screen

	" Undo tree visualizer
	Plug 'simnalamburt/vim-mundo', {
		\'on': 'MundoToggle'
	\}
	"-------------------- }}}

	" Git integration
	"-------------------- {{{
	Plug 'tpope/vim-fugitive'				" Git commands integration
	Plug 'tpope/vim-rhubarb'				" Github support for vim-fugitive
	Plug 'airblade/vim-gitgutter'			" Manage hunks/changes easily
	"-------------------- }}}

	" Code editing
	"-------------------- {{{
	Plug 'tpope/vim-commentary'				" Comment/Uncomment faster
	Plug 'ntpeters/vim-better-whitespace'	" Removes trailing whitespaces on save
	Plug 'tmsvg/pear-tree'					" Pairs characters like (), {}, '', etc...
	Plug 'vim-scripts/matchit.zip'			" Binds more matches on % key press
	Plug 'editorconfig/editorconfig-vim'	" Consistent coding styles across editors

	" Colorize matching parentheses
	Plug 'luochen1990/rainbow', {
		\'on': 'RainbowToggle'
	\}

	" JS / JSX / JSON / CSS / HTML beautifier
	Plug 'maksimr/vim-jsbeautify', {
		\'do': 'git submodule update --init --recursive'
	\}

	" Markdown preview while editing
	Plug 'iamcco/markdown-preview.nvim', {
		\'do': 'curl https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/4.0.0/github-markdown.min.css > github.css && cd app && yarn install'
	\}
	"-------------------- }}}

	" Misc.
	"-------------------- {{{
	Plug 'takac/vim-hardtime'				" Avoid using vim anti-patterns
	Plug 'chrisbra/Recover.vim'				" Adds a diff option when Vim finds a swap file
	Plug 'tpope/vim-repeat'					" Repeats more things using dot key
	Plug 'Lokaltog/vim-easymotion'			" Motion improvements
	Plug 'xolox/vim-misc'					" Required by vim-notes
	Plug 'xolox/vim-notes'					" Notes/Todo lists manager

	" if isdirectory('/usr/local/opt/fzf')
	" 	" Use fzf command installed using brew
	" 	Plug '/usr/local/opt/fzf'
	" else
	" 	" Use fzf command installed using plug
	" 	Plug 'junegunn/fzf', {
	" 		/'do': { -> fzf#install() }
	" 	/}
	" endif
	" Plug 'junegunn/fzf.vim'					" Fuzzy Finder integration in vim
	"-------------------- }}}

	" TODO: Test and config (or remove) this plugins
	" Plug 'skywind3000/asyncrun.vim'
	" Plug 'aeddi/vim-floaterm', {
	" 	\'do': 'pip3 install neovim-remote'
	" \}

	Plug 'norcalli/nvim-colorizer.lua'

endfunction
"-------------------- }}}

"2. Medium plugins import
"-------------------- {{{
function! LoadMediumPlugins()
	Plug 'joshdick/onedark.vim'				" Clean dark theme
	Plug 'vim-airline/vim-airline-themes'	" Airline themes
	Plug 'HerringtonDarkholme/yats.vim'		" Typescript react highlighting
	Plug 'maxmellon/vim-jsx-pretty'			" React syntax highlighting (depends on yats for typescript)
endfunction
"-------------------- }}}

"3. Heavy plugins import
"-------------------- {{{
function! LoadHeavyPlugins()
	" Completion framework using LSP and custom sources
	function! InstallCoc(info)
		if a:info.status == 'installed' || a:info.force
			call coc#util#install()
			call coc#util#install_extension([
				\'coc-css',
				\'coc-html',
				\'coc-java',
				\'coc-json',
				\'coc-lists',
				\'coc-markdownlint',
				\'coc-marketplace',
				\'coc-prettier',
				\'coc-python',
				\'coc-snippets',
				\'coc-svg',
				\'coc-tsserver',
				\'coc-vimlsp',
				\'coc-webpack',
				\'coc-xml',
				\'coc-yaml',
				\'coc-yank'
			\])
			"  'coc-spell-checker'
			call InstallLSP()
		endif
	endfunction

	Plug 'neoclide/coc.nvim', {
		\'do': function('InstallCoc')
	\}
	" Plug 'fatih/vim-go', {
	" 	\'do': ':GoUpdateBinaries'
	" \}
	Plug 'honza/vim-snippets'				" Snippets collection for many languages
endfunction
"-------------------- }}}

"4. Light plugins config
"-------------------- {{{
function! ConfigLightPlugins()
	" Mundo
	"-------------------- {{{
	nnoremap U :MundoToggle<CR>
	"-------------------- }}}

	" EasyMotion
	"-------------------- {{{
	let g:EasyMotion_do_mapping = 0		" Disable default mappings
	let g:EasyMotion_smartcase = 1		" Match target keys by smartcase
	let g:EasyMotion_startofline = 0	" Keep cursor on the same column when moving up/down

	" Replace built-in search by easymotion
	map  / <Plug>(easymotion-sn)
	omap / <Plug>(easymotion-tn)

	" Map easymotion 'directional' search
	map <Leader>l <Plug>(easymotion-lineforward)
	map <Leader>j <Plug>(easymotion-j)
	map <Leader>k <Plug>(easymotion-k)
	map <Leader>h <Plug>(easymotion-linebackward)

	" Rebind history scroll for easymotion search
	augroup easymotion-keymap | au!
	   au VimEnter * EMCommandLineNoreMap <C-J> <DOWN>
	   au VimEnter * EMCommandLineNoreMap <C-K> <UP>
	augroup END
	"-------------------- }}}

	" Gitgutter
	"-------------------- {{{
	let g:gitgutter_max_signs = 500		" Diplay 500 signs maximum

	" Keybindings for previous/next hunk
	nmap ]h <Plug>(GitGutterNextHunk)
	nmap [h <Plug>(GitGutterPrevHunk)
	"-------------------- }}}

	" Rainbow Parentheses :
	"-------------------- {{{
	" Disable it by default and bind toggle key
	let g:rainbow_active = 0
	nnoremap <leader>9 :RainbowToggle<CR>
	"-------------------- }}}

	" Better-Whitespace :
	"-------------------- {{{
	let g:strip_whitespace_on_save= 1	" Strip on save
	let g:strip_whitespace_confirm= 1	" Strip without confirmation
	let g:better_whitespace_enabled= 0	" Don't highlight trailing whitespace
	" On Markdown display trailing whitespace and don't strip them
	autocmd FileType markdown EnableWhitespace
	autocmd FileType markdown DisableStripWhitespaceOnSave
	"-------------------- }}}

	" Taboo
	"------------------- {{{
	" TODO: Fix session
    " set sessionoptions+=tabpages,globals			" Save Taboo tab names in session

	let g:taboo_tab_format = "%N➤ %f %m"			" Format for normal tabs
	let g:taboo_renamed_tab_format = "%N➤ %l %m"	" Format for renamed tabs
	let g:taboo_modified_tab_flag = "◉"				" Set marker that indicates a tab was modified

	let g:airline#extensions#taboo#enabled = 1		" Enable Taboo integration with airline's tabline
	"-------------------- }}}

	" Airline :
	"-------------------- {{{
	set noshowmode								" Disable original mode displaying
	set laststatus=2							" Always show airline
	let g:airline_powerline_fonts = 1			" Enable patched fonts support

	" Enable airline tabline and let Taboo handle tab number
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#show_tab_nr = 0

	" Show tabs if at least two are opened
	let g:airline#extensions#tabline#show_tabs = 1
	let g:airline#extensions#tabline#tab_min_count = 2

	" Display split list and tab count on the right
	let g:airline#extensions#tabline#show_splits = 1
	let g:airline#extensions#tabline#show_tab_count = 1

	" Hide buffer list and close button
	let g:airline#extensions#tabline#show_buffers = 0
	let g:airline#extensions#tabline#show_close_button = 0

	" Display only filename in buffer list
	let g:airline#extensions#tabline#fnamemod = ':t'
	"-------------------- }}}

	" JS-Beautify
	"-------------------- {{{
	" Convenient function that chose the right beautifier
	function! Beautify()
		if &filetype == 'javascript'
			:call JsBeautify()
		elseif &filetype == 'json'
			:call JsonBeautify()
		elseif &filetype == 'jsx'
			:call JsxBeautify()
		elseif &filetype == 'html'
			:call HtmlBeautify()
		elseif &filetype == 'css'
			:call CSSBeautify()
		else
			:echo "No beautifier for '". &filetype . "' filetype"
		endif
	endfunction

	" Bind the function above on a command
	command! Beautify :call Beautify()
	"-------------------- }}}

	" EditorConfig
	"-------------------- {{{
	let g:EditorConfig_exclude_patterns = ['fugitive://.*']				" Ignore paths corresponding to given patterns
	let g:EditorConfig_disable_rules = ['trim_trailing_whitespace']		" Let better_whitespace handle triming whitespaces
	"-------------------- }}}

	" Startify
	"-------------------- {{{
	function! UpdateAll()
		" Update plug first then its plugins
		exec 'PlugUpgrade'
		exec 'PlugUpdate'

		" Vim config is in heavy mode so coc is loaded
		if $VIMPLUG == ''
			autocmd BufLeave <buffer> call UpdateCoc()
		endif
	endfunction

	function! UpdateCoc()
		vertical topleft new

		" Setup buffer only for next buffer then disable `autocmd BufEnter`
		augroup custom_update_coc
			autocmd BufEnter * call SetupCocUpdateBuffer() | autocmd! custom_update_coc BufEnter *
		augroup END

		call coc#rpc#notify('updateExtensions', [v:true])

		function! SetupCocUpdateBuffer()
			setlocal buftype=nofile bufhidden=wipe nobuflisted nolist noswapfile nowrap nocursorline modifiable nospell
			setf vim-plug
			autocmd BufLeave <buffer> call InstallLSP()
			nnoremap <silent><nowait><buffer> q :q<CR>
		endfunction
	endfunction

	function! InstallLSP()
		let install_commands = [
			\ {'name': 'gopls',                'command': 'go install -v golang.org/x/tools/gopls@latest'},
			\ {'name': 'bash-language-server', 'command': 'npm install --global bash-language-server'},
			\ {'name': 'docker-langserver',    'command': 'npm install --global dockerfile-language-server-nodejs'},
		\ ]

		let i = 0
		let t = len(install_commands)
		let install_script = 'echo "$(tput bold)$(tput setaf 3)Install Language Server Protocols ('.string(t).')$(tput sgr0)" &&'

		for install_command in install_commands
			let i += 1
			let install_script = install_script.' echo "\n$(tput bold)$(tput setaf 4)Install '.install_command['name'].' ['.string(i).'/'.string(t).']$(tput sgr0)\n" &&'
			let install_script = install_script.' '.install_command['command'].' &&'
		endfor

		let install_script = install_script.' echo "\n$(tput bold)$(tput setaf 2)Success!$(tput sgr0)" || (echo "\n$(tput bold)$(tput setaf 1)Error!$(tput sgr0)" && exit 1)'

		vertical topleft new
		exec 'term '.install_script
		silent! execute 'f' fnameescape(' ')
		setlocal bufhidden=wipe nobuflisted nolist noswapfile nowrap nocursorline modifiable nospell
		nnoremap <silent><nowait><buffer> q :q<CR>
	endfunction

	function! CheckoutPR()
		echo 'Not implemented (yet)!'
	endfunction

	let g:startify_commands = [
		\ {'c': ['checkout pull requests', 'call CheckoutPR()']},
		\ {'u': ['update plugins and language servers', 'call UpdateAll()']},
	\ ]

	let g:startify_session_persistence = 0			" TODO: Can't disable persistence
	let g:startify_change_to_vcs_root = 0			" TODO: Keep/delete this if vim-rooter installed?
	let g:startify_enable_special = 0
	let g:startify_files_number = 5
	let g:startify_session_sort = 1
	" let g:startify_custom_header = startify#fortune#boxed(startify#fortune#quote())
	let g:startify_custom_indices = map(range(1,100), 'string(v:val)')
	let g:startify_bookmarks = [ {'v': '~/.vimrc'}, {'z': '~/.zshrc'} ]
	let g:startify_lists = [
		\ { 'type': 'sessions',  'header': ['   Sessions']       },
		\ { 'type': 'files',     'header': ['   Recent Files']   },
		\ { 'type': 'commands',  'header': ['   Commands']       },
		\ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
	\ ]

	autocmd User Startified setlocal buflisted	" Prevent a weird bug with buffers opened from startify (e.g can't close PlugUpdate)
	"-------------------- }}}

	" Fuzzy Finder
	"-------------------- {{{
	" TODO: Comment this
	let g:fzf_preview_window = 'right:60%'
	command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, {'options': ['--bind', 'ctrl-d:preview-page-down,ctrl-u:preview-page-up', '--preview', 'bat {} --style="numbers,changes,grid" --theme TwoDark --color always', '--preview-window', 'right:60%']}, <bang>0)

	function! RipgrepFzf(query, fullscreen)
		let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
		let initial_command = printf(command_fmt, shellescape(a:query))
		let reload_command = printf(command_fmt, '{q}')
		let spec = {'options': ['--phony', '--query', a:query, '--bind', 'ctrl-d:preview-page-down,ctrl-u:preview-page-up,change:reload:'.reload_command]}
		call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
	endfunction

	command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
	"-------------------- }}}

	" AsyncRun
	"-------------------- {{{
	" TODO: Comment this
	let g:asyncrun_open = 8

	function! Test()
		if &filetype == 'go'
			:exec 'AsyncRun go test -v %:p:h'
		else
			:echo "No test command for '". &filetype . "' filetype"
		endif
	endfunction

	command! Test :call Test()
	"-------------------- }}}

	" Pear tree
	"-------------------- {{{
	" TODO: Comment this
	let g:pear_tree_repeatable_expand = 0
	"-------------------- }}}

	" Terminus
	"-------------------- {{{
	" TODO: Comment this
	let g:TerminusMouse=0
	"-------------------- }}}

	" Vim-notes
	"-------------------- {{{
	" TODO: Comment this
	let g:notes_directories=['~/.vim/notes_local', '~/.vim/notes']
	"-------------------- }}}

	" MarkDown Preview
	"-------------------- {{{
	" TODO: Comment this
	let g:mkdp_auto_close = 0
	let g:mkdp_refresh_slow = 0
	if has('macunix')
		let g:mkdp_browser = 'Safari'
	else
		" TODO: select an unused browser
	endif
	let g:mkdp_markdown_css = expand('~/.vim/plugged/markdown-preview.nvim/github.css')
	endfunction
	"-------------------- }}}
"-------------------- }}}

"5. Medium plugins config
"-------------------- {{{
function! ConfigMediumPlugins()
	" OneDark theme :
	"-------------------- {{{
	silent! colorscheme onedark		"Enable theme with silent! to avoid error on first launch
	if ($TERM_PROGRAM == 'Iterm.app')
		let g:onedark_terminal_italics=1
	endif
	"-------------------- }}}

	" Airline :
	"-------------------- {{{
	let g:airline_theme = 'onedark'
	"-------------------- }}}
endfunction
"-------------------- }}}

"6. Heavy plugins config
"-------------------- {{{
function! ConfigHeavyPlugins()
	" Coc :
	"-------------------- {{{
	" TODO: Comment this
	let g:airline#extensions#coc#enabled = 1
	" let airline#extensions#coc#error_symbol = 'Error:'
	" let airline#extensions#coc#warning_symbol = 'Warning:'
	" let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
	" let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'

	set hidden			"If hidden is not set, TextEdit might fail.
	set updatetime=300	"Smaller updatetime for CursorHold & CursorHoldI
	set shortmess+=c	"Don't give |ins-completion-menu| messages.
	set signcolumn=yes	"Always show signcolumns

	" " Some server have issues with backup files, see #649
	set nobackup
	set nowritebackup

	" Keybinds for completion
	inoremap <silent><expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : CheckBackspace() ? "\<C-j>" : coc#refresh()
	inoremap <expr><C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

	" Make <CR> to accept selected completion item or notify coc.nvim to format
	" <C-g>u breaks current undo, please make your own choice.
	inoremap <silent><expr> <C-l> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

	function! CheckBackspace() abort
		let col = col('.') - 1
		return !col || getline('.')[col - 1]  =~# '\s'
	endfunction

	" Use <c-space> to trigger completion.
	if has('nvim')
		inoremap <silent><expr> <c-space> coc#refresh()
	else
		inoremap <silent><expr> <c-@> coc#refresh()
	endif

	" Use `[c` and `]c` for navigate diagnostics
	nmap <silent> [e <Plug>(coc-diagnostic-prev)
	nmap <silent> ]e <Plug>(coc-diagnostic-next)

	" Remap keys for gotos
	nmap <silent> gd <Plug>(coc-definition)
	nmap <silent> gy <Plug>(coc-type-definition)
	nmap <silent> gi <Plug>(coc-implementation)
	nmap <silent> gr <Plug>(coc-references)

	nmap <silent> rs <Plug>(coc-rename)
	nmap <silent> rr <Plug>(coc-refactor)

	" Use K for show documentation in preview window
	nnoremap <silent> K :call ShowDocumentation()<CR>

	function! ShowDocumentation()
		if CocAction('hasProvider', 'hover')
			call CocActionAsync('doHover')
		else
			call feedkeys('K', 'in')
		endif
	endfunction

	" Highlight symbol under cursor on CursorHold
	autocmd CursorHold * silent call CocActionAsync('highlight')

	" Remap for format selected region
	" vmap <leader>f  <Plug>(coc-format-selected)
	" nmap <leader>f  <Plug>(coc-format-selected)

	augroup mygroup
		autocmd!
		" Setup formatexpr specified filetype(s).
		autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
		" Update signature help on jump placeholder
		autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
	augroup end

	" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
	vmap <leader>a  <Plug>(coc-codeaction-selected)
	nmap <leader>a  <Plug>(coc-codeaction-selected)

	" Remap for do codeAction of current line
	nmap <leader>ac  <Plug>(coc-codeaction)
	" Fix autofix problem of current line
	nmap <leader>qf  <Plug>(coc-fix-current)

	" Run the Code Lens action on the current line.
	nmap <leader>cl  <Plug>(coc-codelens-action)

	" Introduce function text object
	" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
	xmap if <Plug>(coc-funcobj-i)
	xmap af <Plug>(coc-funcobj-a)
	omap if <Plug>(coc-funcobj-i)
	omap af <Plug>(coc-funcobj-a)

	" Use `:Format` for format current buffer
	command! -nargs=0 Format :call CocAction('format')

	" Add `:Fold` command to fold current buffer.
	command! -nargs=? Fold :call     CocAction('fold', <f-args>)

	" Add `:OR` command for organize imports of the current buffer.
	command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

	" Using CocList
	nnoremap <silent> <space>l  :<C-u>CocList --normal<cr>
	nnoremap <silent> <space>b  :<C-u>CocList --auto-preview --normal buffers<cr>

	nnoremap <silent> <space>y  :<C-u>CocList --normal yank<cr>	"Show yank history
	nnoremap <silent> <space>e  :<C-u>CocList --normal diagnostics <cr>		"Manage extensions

	nnoremap <silent> <space>c  :<C-u>CocList commands<cr>			"Show commands
	" nnoremap <silent> <space>s  :<C-u>CocList --interactive grep -smartcase -workspace<cr>			"Show commands
	" nnoremap <silent> <space>f  :<C-u>CocList files -workspace<cr>			"Show commands
	nnoremap <silent> <space>s  :<C-u>RG<cr>
	nnoremap <silent> <space>f  :<C-u>Files<cr>
	nnoremap <silent> <space>/ 	:<C-u>Lines<cr>
	nnoremap <silent> <space>:  :<C-u>CocList vimcommands<cr>

	nnoremap <silent> <space>o  :<C-u>CocList outline<cr>			"Find symbol of current document
	nnoremap <silent> <space>j  :<C-u>CocNext<CR>					"Do default action for next item.
	nnoremap <silent> <space>k  :<C-u>CocPrev<CR>					"Do default action for previous item.
	nnoremap <silent> <space>r  :<C-u>CocListResume<CR>				"Resume latest coc list
	"-------------------- }}}

	autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')
	" vim-go :
	"-------------------- {{{
	" TODO: Comment this
	" let g:go_fmt_command = "goimports"
	" let g:go_gopls_enabled = 0
	"-------------------- }}}
endfunction
"-------------------- }}}

"7. Load and config plugins
"-------------------- {{{
if $VIMPLUG != 'NONE'
	" Install vim-plug if not installed yet
	if empty(glob('~/.vim/autoload/plug.vim'))
		silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
			\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
		autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
	endif

	" Load plugins according to the selected mode: light, medium or heavy
	call plug#begin('~/.vim/plugged')
		call LoadLightPlugins()
		if $VIMPLUG != 'LIGHT'
			call LoadMediumPlugins()
			if $VIMPLUG != 'MEDIUM'
				call LoadHeavyPlugins()
			endif
		endif
	call plug#end()

	" Configure plugins according to the selected mode: light, medium or heavy
	call ConfigLightPlugins()
	if $VIMPLUG != 'LIGHT'
		call ConfigMediumPlugins()
		if $VIMPLUG != 'MEDIUM'
			call ConfigHeavyPlugins()
		endif
	endif
endif

" Include local config file
let $LOCALFILE=expand("~/.vimrc_local")
if filereadable($LOCALFILE)
	source $LOCALFILE
endif
"-------------------- }}}

" let g:go_gopls_enabled = 0
let g:go_debug_breakpoint_sign_text = '=>'
lua require'colorizer'.setup()

